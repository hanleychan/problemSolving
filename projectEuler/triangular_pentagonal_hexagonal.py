"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle        Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
Pentagonal      Pn=n(3n−1)/2    1, 5, 12, 22, 35, ...
Hexagonal       Hn=n(2n−1)      1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

def generate_triangle_numbers(start_index = 1, n = 10):
    """ Generates n triangle number starting from start_index """
    triangle_numbers = []
    if n <= 0 or start_index < 1:
        return []

    for i in range(start_index, start_index + n):
        next_number = int((i * (i + 1)) / 2)
        triangle_numbers.append(next_number)

    return triangle_numbers

def generate_pentagon_numbers(start_index = 1, n = 10):
    """ Generates n pentagon number starting from start_index """
    pentagon_numbers = []
    if n <= 0 or start_index < 1:
        return []

    for i in range(start_index, start_index + n):
        next_number = int((i * (3 * i - 1)) / 2)
        pentagon_numbers.append(next_number)

    return pentagon_numbers

def generate_hexagon_numbers(start_index = 1, n = 10):
    """ Generates n hexagon number starting from start_index """
    hexagon_numbers = []
    if n <= 0 or start_index < 1:
        return []

    for i in range(start_index, start_index + n):
        next_number = i * (2 * i - 1)
        hexagon_numbers.append(next_number)

    return hexagon_numbers

if __name__ == "__main__":
    # generate triangle, pentagon and hexagon numbers until 40755 is reached
    triangle_numbers = generate_triangle_numbers(1, 285) 
    pentagon_numbers = generate_pentagon_numbers(1, 165) 
    hexagon_numbers = generate_hexagon_numbers(1, 143)

    while True:
        # generate next hexagon number
        hexagon_numbers.extend(generate_hexagon_numbers(len(hexagon_numbers) + 1, 1))
        number = hexagon_numbers[-1]

        # generate pentagon numbers until >= number
        while pentagon_numbers[-1] < number:
            pentagon_numbers.extend(generate_pentagon_numbers(len(pentagon_numbers) + 1, 1))

        # generate triangle numbers until >= number
        while triangle_numbers[-1] < number:
            triangle_numbers.extend(generate_triangle_numbers(len(triangle_numbers) + 1, 1))

        # result found
        if number in pentagon_numbers and number in triangle_numbers:
            break

    print(number)
